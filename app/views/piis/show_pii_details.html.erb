<% require 'validators' %>
<% require 'constants' %>

<p id="notice"><%= notice %></p>

<%
#  srcMeantItRelTypeHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    srcMeantItRelTypeHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  srcMeantItRelTypeUniqHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    srcMeantItRelTypeUniqHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  dstMeantItRelTypeHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    dstMeantItRelTypeHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  dstMeantItRelTypeUniqHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    dstMeantItRelTypeUniqHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
  endPoints = @pii.endPoints
  # Aggregate the results
  totalSrcMeantItRels = []
  totalDstMeantItRels = []
  # The real sender endpoint is the one that has creator_endpoint_id equals id
  sender_endPoint = nil
  sender_endPoint_arr = []
  endPoints.each { |ep_elem|
    totalSrcMeantItRels += ep_elem.srcMeantItRels
    totalDstMeantItRels += ep_elem.dstMeantItRels
    sender_endPoint = ep_elem if ep_elem.creator_endpoint_id == ep_elem.id
    sender_endPoint_arr << ep_elem.id
  }

  srcMeantItRelTypeHash = ControllerHelper.classified_mir_hash_on_message_type_from_mir(totalSrcMeantItRels)
  dstMeantItRelTypeHash = ControllerHelper.classified_mir_hash_on_message_type_from_mir(totalDstMeantItRels)
  
  srcMeantItRelDstUniqs = ControllerHelper.ep_from_mir_uniqDstEndPoints(totalSrcMeantItRels)

  dstMeantItRelSrcUniqs = ControllerHelper.ep_from_mir_uniqSrcEndPoints(totalDstMeantItRels)

  srcMeantItRelTypeUniqHash = ControllerHelper.classified_mir_hash_on_message_type_from_classified_mir_hash_on_message_type_uniqDstEndPoints(srcMeantItRelTypeHash)

  dstMeantItRelTypeUniqHash = ControllerHelper.classified_mir_hash_on_message_type_from_classified_mir_hash_on_message_type_uniqDstEndPoints(dstMeantItRelTypeHash)

%>


<p>
  <b>Pii:</b>
  <%= @pii.pii_value %>
</p>

<div class='container'>
  <div class='span-24'>
    <strong>
    <% if endPoints.size > 1 %>
      <%= endPoints.size %> persons
    <% else %>
      <%= endPoints.size %> person
    <% end %>
    </strong>
    have created an id/nick for this <strong>Pii</strong>.
  </div>
  <div class='span-20'>
    <ul><li>
    <%= render :partial => "shared/end_point_nick_col", :spacer_template => "shared/li_ruler", :collection => endPoints, :locals => { :show_nick_force => true } %>
    </li></ul>
  </div>
  <div class='span-4 last'>
  </div>
  <div class='span-24'>
&nbsp;
  </div>
</div>

<table summary="Meant.It In Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It In</em></caption>
  <thead>
    <tr>
      <th class='span-12'>Meant.It Type</th>
      <th class='span-4'>Senders</th>
      <th class='span-4'>Unique Senders</th>
      <th class='span-4'>Value</th>
    </tr>
  </thead>
  <tbody>
<% dstMeantItRelTypeHash.each { |mi_type, mi_elem| %>
    <tr>
      <td>
         <%= mi_type %>
      </td>
      <td>
        <% if !dstMeantItRelTypeHash[mi_type].nil? %>
          <%= dstMeantItRelTypeHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        <% if !dstMeantItRelTypeUniqHash[mi_type].nil? %>
          <%= dstMeantItRelTypeUniqHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if dstMeantItRelTypeHash.empty? %>
<p>
Nothing yet... <b>Don't be disheartened.  They'll come!</b>
</p>
<% end %>
<p>
  <%= render :partial => "shared/limit_meant_it_rels_with_more", :locals => { :dst_endpoint_id => sender_endPoint_arr, :sender_pii_str => @pii.pii_value } %>
</p>

<table summary="Meant.It Out Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It Out</em></caption>
  <thead>
    <tr>
      <th class='span-12'>Meant.It Type</th>
      <th class='span-4'>Receivers</th>
      <th class='span-4'>Unique Receivers</th>
      <th class='span-4'>Value</th>
    </tr>
  </thead>
  <tbody>
<% srcMeantItRelTypeHash.each { |mi_type, mi_elem| %>
    <tr>
      <td>
         <%= mi_type %>
      </td>
      <td>
        <% if !srcMeantItRelTypeHash[mi_type].nil? %>
          <%= srcMeantItRelTypeHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        <% if !srcMeantItRelTypeUniqHash[mi_type].nil? %>
          <%= srcMeantItRelTypeUniqHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if srcMeantItRelTypeHash.empty? %>
<p>
Nothing yet... <b>Send a meant.it today!</b>
</p>
<% end %>
<p>
  <%= render :partial => "shared/limit_meant_it_rels_with_more", :locals => { :src_endpoint_id => sender_endPoint_arr, :sender_pii_str => @pii.pii_value } %>
</p>

