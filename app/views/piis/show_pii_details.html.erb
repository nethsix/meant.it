<% require 'validators' %>
<% require 'constants' %>

<p id="notice"><%= notice %></p>

<%
#  srcMeantItRelTypeHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    srcMeantItRelTypeHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  srcMeantItRelTypeUniqHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    srcMeantItRelTypeUniqHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  dstMeantItRelTypeHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    dstMeantItRelTypeHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
#  dstMeantItRelTypeUniqHash = {}
#  MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each { |mi_type|
#    dstMeantItRelTypeUniqHash[mi_type] = []
#  } # end MeantItMessageTypeValidator::MEANT_IT_MESSAGE_TYPE_ENUM.each ...
  endPoints = @pii.endPoints
  # Aggregate the results
  totalSrcMeantItRels = []
  totalDstMeantItRels = []
  # The real sender endpoint is the one that has creator_endpoint_id equals id
  sender_endPoint = nil
  sender_endPoint_arr = []
  endPoints.each { |ep_elem|
    totalSrcMeantItRels += ep_elem.srcMeantItRels
    totalDstMeantItRels += ep_elem.dstMeantItRels
    sender_endPoint = ep_elem if ep_elem.creator_endpoint_id == ep_elem.id
    sender_endPoint_arr << ep_elem.id
  }

  srcMeantItRelTypeHash = ControllerHelper.classified_mir_hash_on_message_type_from_mir(totalSrcMeantItRels)
  dstMeantItRelTypeHash = ControllerHelper.classified_mir_hash_on_message_type_from_mir(totalDstMeantItRels)
  
  srcMeantItRelDstUniqs = ControllerHelper.ep_from_mir_uniqDstEndPoints(totalSrcMeantItRels)

  dstMeantItRelSrcUniqs = ControllerHelper.ep_from_mir_uniqSrcEndPoints(totalDstMeantItRels)

  srcMeantItRelTypeUniqHash = ControllerHelper.classified_mir_hash_on_message_type_from_classified_mir_hash_on_message_type_uniqDstEndPoints(srcMeantItRelTypeHash)

  dstMeantItRelTypeUniqHash = ControllerHelper.classified_mir_hash_on_message_type_from_classified_mir_hash_on_message_type_uniqDstEndPoints(dstMeantItRelTypeHash)

%>

<div class='container'>
  <div class='span-24'>
    <p>
      <b>Pii:</b>
      <%= @pii.pii_value %>
    </p>

    <strong>
    <% if endPoints.size > 1 %>
      <% 
         end_point_size_str = "#{endPoints.size} persons"
         end_point_query_str = "ids%5b%5d="
         endpoint_arr = endPoints.collect { |ep_elem| ep_elem.id }
         end_point_query_str += endpoint_arr.join("&ids%5b%5d=")
      %>
    <% else %>
      <% 
         end_point_size_str = "#{endPoints.size} person"
         end_point_query_str = "ids%5b%5d=#{endPoints[0].id}"
      %>
    <% end %>
    <% title_str = CGI::escape("<b>Nick/id(s)</b> that points to <b>Pii:</b>#{@pii.pii_value}") %>
    <%= link_to "#{end_point_size_str}", url_for("/end_points/show_by_ids?#{end_point_query_str}&#{Constants::TITLE_STR}=#{title_str}") %>
    </strong>
    have created an id/nick for this <strong>Pii</strong>.
  </div>
  <div class='span-20'>
<!---    <ul><li>
    <%= render :partial => "shared/end_point_nick_col", :spacer_template => "shared/li_ruler", :collection => endPoints, :locals => { :show_nick_force => true } %> 
    </li></ul> --->
  </div>
  <div class='span-4 last'>
&nbsp;
  </div>
  <div class='span-24'>
&nbsp;

<table summary="Meant.It Received Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It Received</em></caption>
  <thead>
    <tr>
      <th class='span-12'>Meant.It Type</th>
      <th class='span-4'>Senders</th>
      <th class='span-4'>Unique Senders</th>
      <th class='span-4'>Value</th>
    </tr>
  </thead>
  <tbody>
<% dstMeantItRelTypeHash.each { |mi_type, mi_elem| %>
    <tr>
      <td>
         <% 
            pii_pii_value = @pii.pii_value
            if !pii_pii_value.nil?
              pii_pii_value = "'#{@pii.pii_value}'"if !@pii.pii_value.scan(' ').empty?
            end
         %>
         <% find_any_input_custom_str = "#{pii_pii_value} #{mi_type}" %>
         <%= link_to "#{mi_type}", url_for("/find_any?#{Constants::FIND_ANY_INPUT}=#{CGI.escape(find_any_input_custom_str)}")  %>
      </td>
      <td>
        <% if !dstMeantItRelTypeHash[mi_type].nil? %>
          <%= dstMeantItRelTypeHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        <% if !dstMeantItRelTypeUniqHash[mi_type].nil? %>
          <% 
            query_str = "ids%5b%5d="
            src_endpoint_arr = dstMeantItRelTypeUniqHash[mi_type].collect{ |mi_elem_elem| mi_elem_elem.src_endpoint_id }
            query_str += src_endpoint_arr.join("&ids%5b%5d=")
            title_str = CGI.escape("Unique Senders to <b>Pii:</b>#{@pii.pii_value} and <b>Message Type</b>:#{mi_type}")
          %>
          <%= link_to "#{dstMeantItRelTypeUniqHash[mi_type].size}", url_for("/end_points/show_by_ids?#{query_str}&#{Constants::TITLE_STR}=#{title_str}") %>
        <% end %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if dstMeantItRelTypeHash.empty? %>
<p>
Nothing yet... <b>Don't be disheartened.  They'll come!</b>
</p>
<% end %>
<p>
  <%= render :partial => "shared/limit_meant_it_rels_with_more", :locals => { :dst_endpoint_id => sender_endPoint_arr, :sender_pii_str => @pii.pii_value } %>
</p>

<table summary="Meant.It Sent Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It Sent</em></caption>
  <thead>
    <tr>
      <th class='span-12'>Meant.It Type</th>
      <th class='span-4'>Receivers</th>
      <th class='span-4'>Unique Receivers</th>
      <th class='span-4'>Value</th>
    </tr>
  </thead>
  <tbody>
<% srcMeantItRelTypeHash.each { |mi_type, mi_elem| %>
    <tr>
      <td>
         <% 
            pii_pii_value = @pii.pii_value
            if !pii_pii_value.nil?
              pii_pii_value = "'#{@pii.pii_value}'"if !@pii.pii_value.scan(' ').empty?
            end
         %>
         <% find_any_input_custom_str = "#{pii_pii_value} #{mi_type}" %>
         <%= link_to "#{mi_type}", url_for("/find_any?#{Constants::FIND_ANY_INPUT}=#{CGI.escape(find_any_input_custom_str)}")  %>
      </td>
      <td>
        <% if !srcMeantItRelTypeHash[mi_type].nil? %>
          <%= srcMeantItRelTypeHash[mi_type].size %>
        <% end %>
      </td>
      <td>
        <% if !srcMeantItRelTypeUniqHash[mi_type].nil? %>
          <% 
            query_str = "ids%5b%5d="
            dst_endpoint_arr = srcMeantItRelTypeUniqHash[mi_type].collect{ |mi_elem_elem| mi_elem_elem.dst_endpoint_id }
            query_str += dst_endpoint_arr.join("&ids%5b%5d=")
            title_str = CGI.escape("Unique Receivers of <b>pii:</b>#{@pii.pii_value} and <b>message type</b>:#{mi_type}")
          %>
          <%= link_to "#{srcMeantItRelTypeUniqHash[mi_type].size}", url_for("/end_points/show_by_ids?#{query_str}&#{Constants::TITLE_STR}=#{title_str}") %>
        <% end %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if srcMeantItRelTypeHash.empty? %>
<p>
Nothing yet... <b>Send a meant.it today!</b>
</p>
<% end %>
<p>
  <%= render :partial => "shared/limit_meant_it_rels_with_more", :locals => { :src_endpoint_id => sender_endPoint_arr, :sender_pii_str => @pii.pii_value } %>
</p>

</div>
