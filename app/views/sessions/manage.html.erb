<% require 'constants' %>
<% logtag = ControllerHelper.gen_logtag %>
<div class='container'>
  <%= render :partial => "shared/top_menu" %>
  <div class='span-24'>
    <h3>Manage</h3>
    <div>
      <span class="large" style="color:green"><b>Unique Prefix:</b></span>
      <span class="large">
        <%= current_entity.id %><%= Constants::ENTITY_DOMAIN_MARKER %>
      </span>
    </div>
    <%
      if @claim
    %>
        <span class="large" style="color:blue"><b>New Click-to-Claim</b><br /></span>
        <ul>
          <li>
    <%
        # 3 types of variable:
        # - email_str.nil?
        #  - true: Case A: cannot claim non-email pii
#20111026b        # - email_pii.nil?
        # - email_endPoint.nil?
        #  - true: Case B: cannot claim email that have not sent received meant.it
#20111026b        # - claimed_email_pii.nil?
        # - claimed_email_entities.size
        #  - if !email_pii.nil? and !email_str.nil?
#20111026b        #    - claimed_email_pii.nil? is true: Case C: claim is OK
        #    - claimed_email_entities.size == 0 : Case C: claim is OK
#20111026b        #    - claimed_email_pii.nil? is false: Case D: already claimed
        #    - claimed_email_entities.size > 0 : Case D: already claimed
        # Check if it's email
        email_hash = ControllerHelper.parse_email(@claim)
        email_str = email_hash[ControllerHelper::EMAIL_STR]
        Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, email_str:#{email_str}")
        # Check if email already claimed
        email_endPoint = ControllerHelper.find_sender_endPoint_and_pii(email_str, PiiTypeValidator::PII_TYPE_EMAIL)
#20111026b        email_pii = Pii.find_by_pii_value_and_pii_type(email_str, PiiTypeValidator::PII_TYPE_EMAIL)
        Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, email_endPoint.inspect:#{email_endPoint.inspect}")
#20111026b        claimed_email_pii = email_pii.pii_property_set if !email_pii.nil?
        claimed_email_entities = email_endPoint.entities if !email_endPoint.nil?
        Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, claimed_email_entities.inspect:#{claimed_email_entities.inspect}")
#20111026        if !email_str.nil? and claimed_email_endPoint.nil?
#20111026b        if !email_pii.nil? and !email_str.nil? and claimed_email_pii.nil?
        if !email_endPoint.nil? and !email_str.nil? and claimed_email_entities.size == 0
          Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, Case C")
          # Case C
          # Set the confirmed_at for the User (email) to nil to allow claim
          user_obj = User.find_by_email(email_str)
          if !user_obj.nil?
            user_obj.confirmed_at = nil
            user_obj_save = user_obj.save
          end # end if !user_obj.nil?
          if user_obj.nil? or user_obj_save
    %>
              <a href='/resend_confirmation?<%= Constants::EMAIL_VALUE_INPUT %>=<%= @claim %>'><%= @claim %></a>
      <%      
          else 
      %>     
              <%= @claim %> (<span style="color:red">Server error. </span>Please contact <img height='20' src='/images/nethseven_meant_it.png'/>.)
    <%
          end # end if user_obj_save
        # it's email but already claimed
#20111026b        elsif !email_pii.nil? and !email_str.nil? and !claimed_email_pii.nil?
        elsif !email_endPoint.nil? and !email_str.nil? and claimed_email_entities.size > 0
          # Case D
          Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, Case D")
          %>
            <%= @claim %> (<span style="color:red">Email already claimed.</span>Please contact <img height='20' src='/images/nethseven_meant_it.png'/> for dispute.)
        <%     
#20111026b        elsif email_pii.nil?
        elsif email_endPoint.nil?
          Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, Case B")
          # Case B
    %>
            <%= @claim %> (<span style="color:red">meant.it has not been sent from this email before. </span>Send a meant.it from that email prior claiming.)
    <%
        # if not email whether claimed or not
        elsif email_hash[ControllerHelper::EMAIL_STR].nil?
          Rails.logger.debug("#{File.basename(__FILE__)}:#{self.class}:#{Time.now}:manage.html.erb:#{logtag}, Case A")
          # Case A
    %>
            <%= @claim %> (<span style="color:red">Automated claims on non-email pii is not possible. </span>Please contact <img height='20' src='/images/nethseven_meant_it.png'/>.)
    <%      
        end # end if !email_hash[ControllerHelper::EMAIL_STR].nil?
    %>
          </li>
        </ul>
    <%
      end # end if @claim.nil?
    %>
      <span class="large"><b>Search Pii to Claim</b></span>
      <%= form_tag(manage_path, :method => "get") do %>
        <%= text_field_tag(Constants::CLAIM_INPUT) %>
        <%= submit_tag("Search") %>
      <% end %>
      <br/>
      <span class="large"><b>Claimed Pii(s)</b></span>
      <table summary="Claimed Pii(s)"  border="0" cellspacing="0" cellpadding="0">
        <thead>
          <tr>
            <th class='span-12'>Pii</th>
            <th class='span-3'>Sent</th>
            <th class='span-3'>Latest Sent</th>
            <th class='span-3'>Received</th>
            <th class='span-3'>Latest Received</th>
            <th class='span-3'>Actions</th>
          </tr>
        </thead>
        <tbody>
<% Rails.logger.debug("manage.html.erb, current_entity.object_id:#{current_entity.object_id}") %>
<% Rails.logger.debug("manage.html.erb, current_entity.inspect:#{current_entity.inspect}") %>
<% Rails.logger.debug("manage.html.erb, current_entity.endPoints.inspect:#{current_entity.endPoints.inspect}") %>
<% 
  all_endpoints = EndPoint.all
  Rails.logger.debug("manage.html.erb, all_endpoints.inspect:#{all_endpoints.inspect}")
  all_eepr = EntityEndPointRel.all
  Rails.logger.debug("manage.html.erb, all_eepr.inspect:#{all_eepr.inspect}")
 %>
<% if !current_entity.endPoints.nil? and !current_entity.endPoints.empty? %>
  <%          current_entity.endPoints.each do |endpoint_elem| %>
            <tr>
              <td>
                <%= link_to "#{endpoint_elem.pii.pii_value}", url_for("/piis/show_by_pii_value?#{Constants::PII_VALUE_INPUT}=#{endpoint_elem.pii.pii_value}") %>
                <% 
                  Rails.logger.debug("manage.html.erb, endpoint_elem.pii.pii_property_set.inspect:#{endpoint_elem.pii.pii_property_set.inspect}")
                  if !endpoint_elem.pii.pii_property_set.nil? and (!endpoint_elem.pii.pii_property_set.short_desc.nil? and !endpoint_elem.pii.pii_property_set.short_desc.empty?)
                %>
                  (<%= endpoint_elem.pii.pii_property_set.short_desc %>)
                <% end %>
              </td>
              <td>
                <% 
                  sent_count = (endpoint_elem.nil? or endpoint_elem.srcMeantItRels.nil? or endpoint_elem.srcMeantItRels.empty?) ? 0 : endpoint_elem.srcMeantItRels.size
                %>
                <%= sent_count %>
              </td>
              <td>
                <% 
                  lastSrcMeantItRels = MeantItRel.where(:src_endpoint_id => endpoint_elem.id).order("created_at DESC").limit(1) 
                  time_ago_str = "NA"
                  if !lastSrcMeantItRels.nil? and !lastSrcMeantItRels.empty?
                    time_ago_str = time_ago_in_words(lastSrcMeantItRels[0].created_at) + " ago"
                  end # end if !lastSrcMeantItRels.nil? and !lastSrcMeantItRels.empty?
                %>
                  <%= time_ago_str %>
              </td>
              <td>
                <% 
                  received_count = 0
                  endpoint_pii = endpoint_elem.pii
                  all_endpoints = nil
                  if !endpoint_pii.nil?
                    pii = Pii.find_by_pii_value(endpoint_pii.pii_value)
                    all_endpoints = pii.endPoints
                    all_endpoints.each { |all_ep_elem|
                      this_received_count = (all_ep_elem.dstMeantItRels.nil? or all_ep_elem.dstMeantItRels.empty?) ? 0 : all_ep_elem.dstMeantItRels.size
                      received_count += this_received_count
                    } # end all_endpoints.each ...
                  end # end if !endpoint_pii.nil?
                %>
                <%= received_count %>
              </td>
              <td>
                <% 
                  time_ago_str = "NA"
                  if !all_endpoints.nil?
                    dst_endpoint_ids = all_endpoints.collect { |all_ep_elem| all_ep_elem.id }
                    lastDstMeantItRels = MeantItRel.where(:dst_endpoint_id => dst_endpoint_ids).order("created_at DESC").limit(1) 
                    if !lastDstMeantItRels.nil? and !lastDstMeantItRels.empty?
                      time_ago_str = time_ago_in_words(lastDstMeantItRels[0].created_at) + " ago"
                    end # end if !lastSrcMeantItRels.nil? and !lastSrcMeantItRels.empty?
                  end # end if !all_endpoints.nil?
                %>
                  <%= time_ago_str %>
              </td>
              <td>
                <%
                  if !endpoint_elem.pii.nil?
                    if !endpoint_elem.pii.pii_property_set.nil?
                      @pii_property_set = endpoint_elem.pii.pii_property_set
                %>
                    <%= link_to "Edit", edit_pii_property_set_path(@pii_property_set) %>
                <%  else %>
                    <%= link_to "Edit", new_pii_property_set_path(Constants::PII_VALUE_INPUT => endpoint_elem.pii.pii_value) %>
                <%
                    end # end if !endpoint_elem.pii.pii_property_set.nil?
                  end # end if !endpoint_elem.pii.nil?
                %>
                <%= link_to "Bill", "/bill?#{Constants::PII_VALUE_INPUT}=#{CGI::escape(endpoint_elem.pii.pii_value)}" %>
              </td>
            </tr>
<%
          end
        else
%>
          None
<%
        end # end if current_entity.endPoints.nil? ...
%>
          </tbody>
        </table>
  </div>
</div>
