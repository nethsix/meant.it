<% require 'validators' %>
<% require 'constants' %>
<p id="notice"><%= notice %></p>

<%
  sender_srcMeantItRels = ControllerHelper.mir_from_ep_meantItRels(sender_endPoints)
  # sender to receiver relationship
  s_mir_r_arr = ControllerHelper.mir_from_find_match_dstEndPoints(sender_srcMeantItRels, receiver_endPoints)
  s_mir_r_msg_uniq_hash = ControllerHelper.mir_from_mir_uniqSrcMsgDstEndPoints(s_mir_r_arr)

  # receiver to sender relationship
  receiver_srcMeantItRels = ControllerHelper.mir_from_ep_meantItRels(receiver_endPoints)
  r_mir_s_arr = ControllerHelper.mir_from_find_match_dstEndPoints(receiver_srcMeantItRels, sender_endPoints)
  r_mir_s_msg_uniq_hash = ControllerHelper.mir_from_mir_uniqSrcMsgDstEndPoints(r_mir_s_arr)

%>

<p>
<strong>Meant.It:</strong>
nick:<%= sender_endPoints[0].nick %> <=>
nick:<%= receiver_endPoints[0].nick %>
</p>
<table summary="Meant.It Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It 'nick:<%= sender_endPoints[0].nick %> <=> nick:<%= receiver_endPoints[0].nick %>'</em></caption>
  <thead>
    <tr>
      <th class='span-8'>Sender Nick</th>
      <th class='span-4'>Message Type</th>
      <th class='span-8'>Receiver Nick</th>
      <th class='span-2'>Count</th>
      <th class='span-2'>Value</th>
    </tr>
  </thead>
  <tbody>
<% s_mir_r_msg_uniq_hash.each { |hash_key, mir_arr| %>
    <tr>
      <td>
        <% # Just take any elem since they all have same source dest %>
        <%= render :partial => "shared/end_point_nick_col", :collection => [mir_arr[0].src_endpoint], :locals => { :show_nick_force => true } %>
      </td>
      <td>
        <%= mir_arr[0].message_type %>
      </td>
      <td>
        <% # Just take any elem since they all have same source dest %>
        <%= render :partial => "shared/end_point_nick_col", :collection => [mir_arr[0].dst_endpoint], :locals => { :show_nick_force => true } %>
      </td>
      <td>
        <%= mir_arr.size %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if s_mir_r_msg_uniq_hash.empty? %>
<p>
Nothing yet... <b>Don't be disheartened.  They'll come!</b>
</p>
<% else %>
<p>
Last <%= Constants::WEB_MAX_MEANTIT_IN %> Meant.It In 'nick:<%= sender_endPoints[0].nick %> <=> nick:<%= receiver_endPoints[0].nick %>'<br/>
<%
  lastXs2rMeantItRels= MeantItRel.where(:src_endpoint_id => sender_endPoints, :dst_endpoint_id => receiver_endPoints).order("created_at DESC").limit(Constants::WEB_MAX_MEANTIT_IN)
%>
  <% if !lastXs2rMeantItRels.nil? and !lastXs2rMeantItRels.empty? %>
    <ul><li>
  <% end %>
    <%= render :partial => "shared/meant_it_rel", :spacer_template => "shared/li_ruler", :collection => lastXs2rMeantItRels %>
  <% if !lastXs2rMeantItRels.nil? and !lastXs2rMeantItRels.empty? %>
    </li></ul>
  <% end %>
</p>
<% end %>

<table summary="Meant.It Table"  border="0" cellspacing="0" cellpadding="0">
  <caption><em>Meant.It 'nick:<%= receiver_endPoints[0].nick %> <=> nick:<%= sender_endPoints[0].nick %>'</em></caption>
  <thead>
    <tr>
      <th class='span-8'>Sender Nick</th>
      <th class='span-4'>Message Type</th>
      <th class='span-8'>Receiver Nick</th>
      <th class='span-2'>Count</th>
      <th class='span-2'>Value</th>
    </tr>
  </thead>
  <tbody>
<% r_mir_s_msg_uniq_hash.each { |hash_key, mir_arr| %>
    <tr>
      <td>
        <% # Just take any elem since they all have same source dest %>
        <%= render :partial => "shared/end_point_nick_col", :collection => [mir_arr[0].src_endpoint], :locals => { :show_nick_force => true } %>
      </td>
      <td>
        <%= mir_arr[0].message_type %>
      </td>
      <td>
        <% # Just take any elem since they all have same source dest %>
        <%= render :partial => "shared/end_point_nick_col", :collection => [mir_arr[0].dst_endpoint], :locals => { :show_nick_force => true } %>
      </td>
      <td>
        <%= mir_arr.size %>
      </td>
      <td>
        Coming..
      </td>
    </tr>
<% } %>
  </tbody>
</table>
<% if r_mir_s_msg_uniq_hash.empty? %>
<p>
Nothing yet... <b>Don't be disheartened.  They'll come!</b>
</p>
<% else %>
<p>
Last <%= Constants::WEB_MAX_MEANTIT_IN %> Meant.It In 'nick:<%= receiver_endPoints[0].nick %> <=> nick:<%= sender_endPoints[0].nick %>'<br/>
<%
  lastXr2sMeantItRels= MeantItRel.where(:src_endpoint_id => receiver_endPoints, :dst_endpoint_id => sender_endPoints).order("created_at DESC").limit(Constants::WEB_MAX_MEANTIT_IN)
%>
  <% if !lastXr2sMeantItRels.nil? and !lastXr2sMeantItRels.empty? %>
    <ul><li>
  <% end %>
    <%= render :partial => "shared/meant_it_rel", :spacer_template => "shared/li_ruler", :collection => lastXr2sMeantItRels %>
  <% if !lastXr2sMeantItRels.nil? and !lastXr2sMeantItRels.empty? %>
    </li></ul>
  <% end %>
</p>
<% end %>
